 https://www.kb.ischool.uw.edu/2022/02/04/set-up-ischool-issued-windows-computer/

https://www.bleepingcomputer.com/news/microsoft/microsoft-fixes-print-to-pdf-feature-broken-by-windows-update/

https://www.catalog.update.microsoft.com/Search.aspx?q=KB5060829

S
---------------------------------------------------
Start of Script
---------------------------------------
Refer all these Articles for Clean up Hard Drive (C:\): 

https://prosystech.nl/powershell-clean-up-hard-drive-c/
https://level.io/library/script-windows-disk-cleanup
https://roheed.com/free-up-disk-space-using-powershell/
https://darwinsdata.com/how-do-i-run-a-disk-cleanup-in-powershell/
https://www.geeksforgeeks.org/linux-unix/disk-cleanup-using-powershell-scripts/(Less intrusive Way)

Defender Error Fix: https://www.windows11forums.com/threads/windows-11-defender-firewall-will-not-load.355/#post-3757
Defender Error Fix: https://techlou.com/fix-unable-to-delete-all-specified-values-error-in-registry-editor/
https://windowsforum.com/threads/win11-upgrade-2025-07-cu-causing-mpssvc-break.375192/
---------------------------------------------------

# Define the registry key path
$RegPath = "HKLM:\SOFTWARE\7-Zip\Hari"

# Get the current ACL of the registry key
$acl = Get-Acl -Path $RegPath

# Create a new access rule
# BUILTIN\Users = all local users
# BUILTIN\Administrators = Local admins group
# NT AUTHORITY\Authenticated Users = All authenticated users (domain or local)
# FullControl = full rights
# ContainerInherit, ObjectInherit = apply to subkeys
# None = no special propagation flags
# Allow = grant permissions
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "BUILTIN\Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)

# Add the rule to the ACL
$acl.SetAccessRule($rule)

# Apply the ACL back to the registry key
Set-Acl -Path $RegPath -AclObject $acl


---------

# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 1: Take ownership
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($owner)
Set-Acl -Path $RegPath -AclObject $acl

# Step 2: Add full control for Authenticated Users
$acl = Get-Acl -Path $RegPath
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)
$acl.SetAccessRule($rule)
Set-Acl -Path $RegPath -AclObject $acl

# Step 3 (Optional): Restore ownership to the service account
# (This keeps Windows happy and avoids service issues)
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($svcOwner)
Set-Acl -Path $RegPath -AclObject $acl


---------------------------


# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# --- Step 0: Force .NET RegistryKey object (sometimes Get-Acl fails directly) ---
$regKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs",
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,
    [System.Security.AccessControl.RegistryRights]::TakeOwnership
)

if (-not $regKey) {
    Write-Error "Failed to open registry key: $RegPath"
    exit
}

# --- Step 1: Take ownership ---
$acl = $regKey.GetAccessControl([System.Security.AccessControl.AccessControlSections]::All)
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl.SetOwner($owner)
$regKey.SetAccessControl($acl)

# --- Step 2: Add full control for Authenticated Users ---
$acl = $regKey.GetAccessControl()
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    [System.Security.AccessControl.RegistryRights]::FullControl,
    [System.Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [System.Security.AccessControl.InheritanceFlags]::ObjectInherit,
    [System.Security.AccessControl.PropagationFlags]::None,
    [System.Security.AccessControl.AccessControlType]::Allow
)
$acl.SetAccessRule($rule)
$regKey.SetAccessControl($acl)

# --- Step 3 (Optional): Restore ownership back to MpsSvc ---
$acl = $regKey.GetAccessControl()
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl.SetOwner($svcOwner)
$regKey.SetAccessControl($acl)

$regKey.Close()

----------------------------
#4
$tok = [System.Security.Principal.WindowsIdentity]::GetCurrent().Token
$SE_TAKE_OWNERSHIP = 0x14
$null = [advapi32]::AdjustTokenPrivileges($tok, $false, [PSCustomObject]@{PrivilegeCount=1; Luid=$SE_TAKE_OWNERSHIP; Attributes=2}, 0, [IntPtr]::Zero, [IntPtr]::Zero)
Write-Host "SeTakeOwnershipPrivilege enabled for this session."

------------------------
#5
# Step 1: Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 2: Open the registry key with ReadWrite permissions
$RegKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs", 
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, 
    [System.Security.AccessControl.RegistryRights]::ChangePermissions
)

# Step 3: Get the current ACL
$acl = $RegKey.GetAccessControl()

# Step 4: Set the owner to Administrators (or your current user)
$owner = [System.Security.Principal.NTAccount]"Administrators"
$acl.SetOwner($owner)

# Step 5: Apply the new ACL
$RegKey.SetAccessControl($acl)

# Step 6: Grant FullControl to Administrators
$rule = New-Object System.Security.AccessControl.RegistryAccessRule (
    "Administrators", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow"
)
$acl.AddAccessRule($rule)
$RegKey.SetAccessControl($acl)

$RegKey.Close()

Write-Host "Ownership and full control granted. You can now modify the key."

--------------

#Export 
$HiveRoot = "HKLM\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"
$OutFile = "C:\Temp\Appcs.hiv"
Start-Process -FilePath reg -ArgumentList "save `"$HiveRoot`" `"$OutFile`"" -Wait -NoNewWindow
Write-Host "Saved $HiveRoot to $OutFile"

-----------
#Import

# Path to your hive file
$HiveFile = "C:\Users\hkaka\Downloads\firewall_fix_windows_11\mpssvc.hiv"

# Mount location under HKEY_LOCAL_MACHINE (can also use HKEY_USERS)
$MountPoint = "TempHive"

# Load the hive
reg load "HKLM\$MountPoint" $HiveFile
Write-Host "Hive loaded at HKLM:\$MountPoint"
---------------

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
 Highlights from the Past Year (Nov 2024 to Oct 2025)

 Major Accomplishments:

 Successfully led enterprise-wide Windows 11 migration initiative, upgrading over 8,000 endpoints from Windows 10 to Windows 11 24H2, ensuring full hardware and application compatibility.
 Deployed and managed Windows 11 Operating System Task Sequence with latest OS Drivers via SCCM. 
Successfully transitioned from creating Legacy Driver Packages in SCCM to creating Package Objects that houses the Model Specific OS Drivers Content by decreasing the storage occupied by 50% on the SCCM Site Servers and SCCM Distribution points. 
Successfully created, tested & deployed the POS Task Sequence and upgraded 99% of the POS devices to the latest Windows 11 24H2 OS.


 Key Metrics (SLA adherence, incident resolution times, customer satisfaction, etc.):

 Maintained 99% SLA adherence across all MECM/Intune service requests and incidents.
 Reduced incident resolution time by 25% through improved proactive Job Aid Creations, GPOs Tweaks, Minor Application/Package fixes and streamlined escalation workflows.
 Achieved positive user satisfaction score for OS delivery and technical support.

 Notable Projects or Initiatives:

 Implemented CIS Level Hardening settings for Windows11 24H2 devices which significantly strengthened the entire endpoint posture and assisted resolving any conflicting GPOs. 
Successfully removed all the Push Start Menu related GPO policies from the ACG Environment.
 
 

---

 Operational Performance

 Service Delivery KPIs:

 99% successful deployment rate for monthly software updates via MECM.
 98% compliance rate in Windows quality and feature updates.
 100% adherence to change management protocols for production deployments.

 Volume Trends (Tickets, Requests, Changes):

 Processed over 7,500 support tickets, 1,200 change requests, and 350 automation-driven deployments through the EDM platform.

 Quality Assurance and Compliance:

 Conducted compliance audits when requested and maintained endpoint health above 97% across the enterprise for the core stack of Apps like S1, Palo Alto, Zscaler, M365 Apps.
 coordinated between PMO, engineering, imaging, DSS, Deployment, EIS, and support functions ensured smooth execution and rapid mitigation of issues.
continually developed software packages (e.g., Zscaler Client Utility, S1, VS Code, .Net Framework 3.5, Modern Secure Print Driver Installers and many more) to streamline W11 deployments and improved application stability on Windows 11.
Leveraged the Microsoft Autopatch Services to deploy OS, Office, and Drivers to all ACG Workstations ensured monthly patches are always 95% complaint. 



---

 Innovation & Improvements



 Automation:Custom PowerShell scripts for user-profile cleanup and disk cleanup significantly reduced manual overhead, improved device readiness, and optimized storage utilization.

maintained a repository of custom SQL queries, to assist the team with data analysis for instant visibility into deployment health, compliance, and error trends, enabling proactive corrective actions.

Build and deploy the Windows 11 In Place Upgrade script that was used during the deployment. Set the Windows 10 & Windows 11 TS to TATOO the image with the proper information



---

 Roadmap for the Next Year (Nov 2025 to Oct 2026)

 Planned Initiatives & Strategic Goals:

 Expand Zero Trust initiatives and help ACG get onto Modern Management Journey by leveraging conditional access and compliance-based device restrictions.
 Continue automation expansion leveraging Winget to keep our 3rd party applications always up to date, targeting at least 40% reduction in manual packaging the application updates and deployments.
 Ensure atleast 90% of the BitLocker recovery keys be migrated from Legacy On Prem AD environment to Entra/Intune. So that Technicians from DSS/SD teams can fetch the recovery keys themselves when in need. reducing the reliance on IAM Teams when in need. 

 Collaborate with Application teams, SMEs/Power Users to determine the apps that are not being used in the environment and start cleaning/uninstalling them up to reduce our App foot print and in turn reduce the need for keeping them up to date. 
Reduce the redundant apps in the Task Sequence images which will keep the Personas/images Lite improving device performance and reduces the time during the imaging process. 
Modernize the download of OS Drivers during Imaging process to let it fetch the content straight from the vendor's FTP site eliminating the need to packaging these OS Drivers ensuring the latest and greatest drivers are always installed on the machine. 
Implement Power BI with SCCM, Intune & Create visually appealing dashboards to reduce manual compilation of any weekly reporting data. 
Upgrade MECM infrastructure to 2403 build, ensuring Stability & enabling improved Intune co-management features.
Develop a Concrete more robust plan for handling the Vulnerabilities in ACG Enviroment. 





