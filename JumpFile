 https://www.kb.ischool.uw.edu/2022/02/04/set-up-ischool-issued-windows-computer/

https://www.bleepingcomputer.com/news/microsoft/microsoft-fixes-print-to-pdf-feature-broken-by-windows-update/

https://www.catalog.update.microsoft.com/Search.aspx?q=KB5060829

S
---------------------------------------------------
Start of Script
---------------------------------------
Refer all these Articles for Clean up Hard Drive (C:\): 

https://prosystech.nl/powershell-clean-up-hard-drive-c/
https://level.io/library/script-windows-disk-cleanup
https://roheed.com/free-up-disk-space-using-powershell/
https://darwinsdata.com/how-do-i-run-a-disk-cleanup-in-powershell/
https://www.geeksforgeeks.org/linux-unix/disk-cleanup-using-powershell-scripts/(Less intrusive Way)

Defender Error Fix: https://www.windows11forums.com/threads/windows-11-defender-firewall-will-not-load.355/#post-3757
Defender Error Fix: https://techlou.com/fix-unable-to-delete-all-specified-values-error-in-registry-editor/
https://windowsforum.com/threads/win11-upgrade-2025-07-cu-causing-mpssvc-break.375192/
---------------------------------------------------

# Define the registry key path
$RegPath = "HKLM:\SOFTWARE\7-Zip\Hari"

# Get the current ACL of the registry key
$acl = Get-Acl -Path $RegPath

# Create a new access rule
# BUILTIN\Users = all local users
# BUILTIN\Administrators = Local admins group
# NT AUTHORITY\Authenticated Users = All authenticated users (domain or local)
# FullControl = full rights
# ContainerInherit, ObjectInherit = apply to subkeys
# None = no special propagation flags
# Allow = grant permissions
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "BUILTIN\Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)

# Add the rule to the ACL
$acl.SetAccessRule($rule)

# Apply the ACL back to the registry key
Set-Acl -Path $RegPath -AclObject $acl


---------

# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 1: Take ownership
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($owner)
Set-Acl -Path $RegPath -AclObject $acl

# Step 2: Add full control for Authenticated Users
$acl = Get-Acl -Path $RegPath
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)
$acl.SetAccessRule($rule)
Set-Acl -Path $RegPath -AclObject $acl

# Step 3 (Optional): Restore ownership to the service account
# (This keeps Windows happy and avoids service issues)
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($svcOwner)
Set-Acl -Path $RegPath -AclObject $acl


---------------------------


# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# --- Step 0: Force .NET RegistryKey object (sometimes Get-Acl fails directly) ---
$regKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs",
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,
    [System.Security.AccessControl.RegistryRights]::TakeOwnership
)

if (-not $regKey) {
    Write-Error "Failed to open registry key: $RegPath"
    exit
}

# --- Step 1: Take ownership ---
$acl = $regKey.GetAccessControl([System.Security.AccessControl.AccessControlSections]::All)
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl.SetOwner($owner)
$regKey.SetAccessControl($acl)

# --- Step 2: Add full control for Authenticated Users ---
$acl = $regKey.GetAccessControl()
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    [System.Security.AccessControl.RegistryRights]::FullControl,
    [System.Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [System.Security.AccessControl.InheritanceFlags]::ObjectInherit,
    [System.Security.AccessControl.PropagationFlags]::None,
    [System.Security.AccessControl.AccessControlType]::Allow
)
$acl.SetAccessRule($rule)
$regKey.SetAccessControl($acl)

# --- Step 3 (Optional): Restore ownership back to MpsSvc ---
$acl = $regKey.GetAccessControl()
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl.SetOwner($svcOwner)
$regKey.SetAccessControl($acl)

$regKey.Close()

----------------------------
#4
$tok = [System.Security.Principal.WindowsIdentity]::GetCurrent().Token
$SE_TAKE_OWNERSHIP = 0x14
$null = [advapi32]::AdjustTokenPrivileges($tok, $false, [PSCustomObject]@{PrivilegeCount=1; Luid=$SE_TAKE_OWNERSHIP; Attributes=2}, 0, [IntPtr]::Zero, [IntPtr]::Zero)
Write-Host "SeTakeOwnershipPrivilege enabled for this session."

------------------------
#5
# Step 1: Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 2: Open the registry key with ReadWrite permissions
$RegKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs", 
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, 
    [System.Security.AccessControl.RegistryRights]::ChangePermissions
)

# Step 3: Get the current ACL
$acl = $RegKey.GetAccessControl()

# Step 4: Set the owner to Administrators (or your current user)
$owner = [System.Security.Principal.NTAccount]"Administrators"
$acl.SetOwner($owner)

# Step 5: Apply the new ACL
$RegKey.SetAccessControl($acl)

# Step 6: Grant FullControl to Administrators
$rule = New-Object System.Security.AccessControl.RegistryAccessRule (
    "Administrators", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow"
)
$acl.AddAccessRule($rule)
$RegKey.SetAccessControl($acl)

$RegKey.Close()

Write-Host "Ownership and full control granted. You can now modify the key."

--------------

#Export 
$HiveRoot = "HKLM\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"
$OutFile = "C:\Temp\Appcs.hiv"
Start-Process -FilePath reg -ArgumentList "save `"$HiveRoot`" `"$OutFile`"" -Wait -NoNewWindow
Write-Host "Saved $HiveRoot to $OutFile"

-----------
#Import

# Path to your hive file
$HiveFile = "C:\Users\hkaka\Downloads\firewall_fix_windows_11\mpssvc.hiv"

# Mount location under HKEY_LOCAL_MACHINE (can also use HKEY_USERS)
$MountPoint = "TempHive"

# Load the hive
reg load "HKLM\$MountPoint" $HiveFile
Write-Host "Hive loaded at HKLM:\$MountPoint"
---------------

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
 Excellent — your content is very strong and detailed; it just needs refinement for grammar, formality, and leadership readability. Below is the **polished, grammatically correct, and professionally phrased** version while keeping all your technical substance intact.

---

## **Highlights from the Past Year (Nov 2024 – Oct 2025)**

### **Major Accomplishments:**

* Successfully led the **enterprise-wide Windows 11 migration initiative**, upgrading over **8,000 endpoints** from Windows 10 to Windows 11 (24H2), ensuring full hardware and application compatibility.
* Designed and deployed the **Windows 11 Operating System Task Sequence** with the latest OEM driver integrations via SCCM.
* Transitioned from **legacy driver packages** to **model-specific driver package objects** in SCCM, reducing storage utilization by **50%** across site servers and distribution points.
* Created, tested, and deployed the **POS Task Sequence**, successfully upgrading **99% of POS devices** to Windows 11 (24H2).

### **Key Metrics (SLA adherence, incident resolution times, customer satisfaction, etc.):**

* Maintained **99% SLA adherence** across all MECM/Intune service requests and incidents.
* Reduced **incident resolution time by 25%** through proactive job aid development, targeted GPO optimizations, minor application/package fixes, and streamlined escalation workflows.
* Achieved **positive end-user satisfaction** ratings for OS deployment quality and technical support responsiveness.

### **Notable Projects or Initiatives:**

* Implemented **CIS Level Hardening** for Windows 11 (24H2) devices, significantly strengthening endpoint security posture and resolving multiple GPO conflicts.
* Successfully **removed all Start Menu–related legacy GPOs** from the ACG environment, aligning policies with modern Windows 11 standards.

---

## **Operational Performance**

### **Service Delivery KPIs:**

* Achieved a **99% successful deployment rate** for monthly software updates via MECM.
* Maintained **98% compliance** in Windows quality and feature update deployments.
* Ensured **100% adherence** to change management protocols for all production deployments.

### **Volume Trends (Tickets, Requests, Changes):**

* Processed over **7,500 support tickets**, **1,200 change requests**, and **350 automation-driven deployments** through the EDM platform.

### **Quality Assurance and Compliance:**

* Conducted compliance audits as required and maintained endpoint health above **97%** across the enterprise for core applications such as SentinelOne, Palo Alto GlobalProtect, Zscaler, and Microsoft 365 Apps.
* Coordinated across PMO, Engineering, Imaging, DSS, Deployment, EIS, and Support functions to ensure **seamless execution** and **rapid mitigation** of deployment issues.
* Continuously developed and maintained **critical software packages** (e.g., Zscaler Client Connector, SentinelOne, VS Code, .NET Framework 3.5, and Modern Secure Print Driver Installers) to streamline Windows 11 deployments and improve application stability.
* Leveraged **Microsoft Autopatch** to deploy OS, Office, and drivers to all ACG workstations, ensuring **95% patch compliance** on a monthly basis.

---

## **Innovation & Improvements**

### **Automation:**

* Developed **custom PowerShell scripts** for user-profile cleanup and disk optimization, significantly reducing manual effort, improving device readiness, and optimizing storage utilization.
* Maintained a **centralized SQL query repository** to provide real-time insights into deployment health, compliance status, and error trends—enabling faster data-driven decision-making.
* Built and deployed the **Windows 11 In-Place Upgrade Script** used during migration activities. Enhanced both Windows 10 and Windows 11 Task Sequences to **tattoo deployment metadata** for improved visibility and audit tracking.

---

## **Roadmap for the Next Year (Nov 2025 – Oct 2026)**

### **Planned Initiatives & Strategic Goals:**

* Expand **Zero Trust initiatives** and advance ACG’s **Modern Management journey** by implementing conditional access and compliance-based device restrictions.
* Continue automation expansion by leveraging **WinGet** to automatically update third-party applications—targeting at least a **40% reduction in manual packaging and deployment effort**.
* Ensure **90% migration of BitLocker recovery keys** from the legacy on-prem AD environment to **Entra ID/Intune**, enabling DSS and Service Desk technicians to retrieve recovery keys independently, reducing dependency on IAM teams.
* Collaborate with **Application Teams and SMEs/Power Users** to identify and decommission unused applications, reducing the overall application footprint and minimizing patching overhead.
* Streamline **Task Sequence images** by eliminating redundant applications to improve device performance and reduce imaging time.
* Modernize the **driver management process** by enabling dynamic driver downloads directly from vendor FTP repositories—eliminating the need for packaging and ensuring the latest drivers are always deployed.
* Implement **Power BI dashboards** integrated with SCCM and Intune to automate weekly reporting and provide visually rich operational insights.
* Upgrade the **MECM infrastructure to build 2403**, enhancing stability and enabling advanced Intune co-management capabilities.
* Develop a **comprehensive vulnerability management framework** for ACG’s environment, focusing on faster remediation and continuous security posture improvement.

---

Would you like me to format this into a **Word or PDF version with company-style headings and indentation** (e.g., suitable for presentation or submission to leadership)?



