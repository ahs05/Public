https://www.kb.ischool.uw.edu/2022/02/04/set-up-ischool-issued-windows-computer/

https://www.bleepingcomputer.com/news/microsoft/microsoft-fixes-print-to-pdf-feature-broken-by-windows-update/

https://www.catalog.update.microsoft.com/Search.aspx?q=KB5060829

S
---------------------------------------------------
Start of Script
---------------------------------------
Refer all these Articles for Clean up Hard Drive (C:\): 

https://prosystech.nl/powershell-clean-up-hard-drive-c/
https://level.io/library/script-windows-disk-cleanup
https://roheed.com/free-up-disk-space-using-powershell/
https://darwinsdata.com/how-do-i-run-a-disk-cleanup-in-powershell/
https://www.geeksforgeeks.org/linux-unix/disk-cleanup-using-powershell-scripts/(Less intrusive Way)

Defender Error Fix: https://www.windows11forums.com/threads/windows-11-defender-firewall-will-not-load.355/#post-3757
Defender Error Fix: https://techlou.com/fix-unable-to-delete-all-specified-values-error-in-registry-editor/
https://windowsforum.com/threads/win11-upgrade-2025-07-cu-causing-mpssvc-break.375192/
---------------------------------------------------

# Define the registry key path
$RegPath = "HKLM:\SOFTWARE\7-Zip\Hari"

# Get the current ACL of the registry key
$acl = Get-Acl -Path $RegPath

# Create a new access rule
# BUILTIN\Users = all local users
# BUILTIN\Administrators = Local admins group
# NT AUTHORITY\Authenticated Users = All authenticated users (domain or local)
# FullControl = full rights
# ContainerInherit, ObjectInherit = apply to subkeys
# None = no special propagation flags
# Allow = grant permissions
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "BUILTIN\Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)

# Add the rule to the ACL
$acl.SetAccessRule($rule)

# Apply the ACL back to the registry key
Set-Acl -Path $RegPath -AclObject $acl


---------

# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 1: Take ownership
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($owner)
Set-Acl -Path $RegPath -AclObject $acl

# Step 2: Add full control for Authenticated Users
$acl = Get-Acl -Path $RegPath
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)
$acl.SetAccessRule($rule)
Set-Acl -Path $RegPath -AclObject $acl

# Step 3 (Optional): Restore ownership to the service account
# (This keeps Windows happy and avoids service issues)
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($svcOwner)
Set-Acl -Path $RegPath -AclObject $acl


---------------------------


# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# --- Step 0: Force .NET RegistryKey object (sometimes Get-Acl fails directly) ---
$regKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs",
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,
    [System.Security.AccessControl.RegistryRights]::TakeOwnership
)

if (-not $regKey) {
    Write-Error "Failed to open registry key: $RegPath"
    exit
}

# --- Step 1: Take ownership ---
$acl = $regKey.GetAccessControl([System.Security.AccessControl.AccessControlSections]::All)
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl.SetOwner($owner)
$regKey.SetAccessControl($acl)

# --- Step 2: Add full control for Authenticated Users ---
$acl = $regKey.GetAccessControl()
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    [System.Security.AccessControl.RegistryRights]::FullControl,
    [System.Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [System.Security.AccessControl.InheritanceFlags]::ObjectInherit,
    [System.Security.AccessControl.PropagationFlags]::None,
    [System.Security.AccessControl.AccessControlType]::Allow
)
$acl.SetAccessRule($rule)
$regKey.SetAccessControl($acl)

# --- Step 3 (Optional): Restore ownership back to MpsSvc ---
$acl = $regKey.GetAccessControl()
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl.SetOwner($svcOwner)
$regKey.SetAccessControl($acl)

$regKey.Close()

----------------------------
#4
$tok = [System.Security.Principal.WindowsIdentity]::GetCurrent().Token
$SE_TAKE_OWNERSHIP = 0x14
$null = [advapi32]::AdjustTokenPrivileges($tok, $false, [PSCustomObject]@{PrivilegeCount=1; Luid=$SE_TAKE_OWNERSHIP; Attributes=2}, 0, [IntPtr]::Zero, [IntPtr]::Zero)
Write-Host "SeTakeOwnershipPrivilege enabled for this session."

------------------------
#5
# Step 1: Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 2: Open the registry key with ReadWrite permissions
$RegKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs", 
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, 
    [System.Security.AccessControl.RegistryRights]::ChangePermissions
)

# Step 3: Get the current ACL
$acl = $RegKey.GetAccessControl()

# Step 4: Set the owner to Administrators (or your current user)
$owner = [System.Security.Principal.NTAccount]"Administrators"
$acl.SetOwner($owner)

# Step 5: Apply the new ACL
$RegKey.SetAccessControl($acl)

# Step 6: Grant FullControl to Administrators
$rule = New-Object System.Security.AccessControl.RegistryAccessRule (
    "Administrators", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow"
)
$acl.AddAccessRule($rule)
$RegKey.SetAccessControl($acl)

$RegKey.Close()

Write-Host "Ownership and full control granted. You can now modify the key."

--------------

#Export 
$HiveRoot = "HKLM\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"
$OutFile = "C:\Temp\Appcs.hiv"
Start-Process -FilePath reg -ArgumentList "save `"$HiveRoot`" `"$OutFile`"" -Wait -NoNewWindow
Write-Host "Saved $HiveRoot to $OutFile"

-----------
#Import

# Path to your hive file
$HiveFile = "C:\Users\hkaka\Downloads\firewall_fix_windows_11\mpssvc.hiv"

# Mount location under HKEY_LOCAL_MACHINE (can also use HKEY_USERS)
$MountPoint = "TempHive"

# Load the hive
reg load "HKLM\$MountPoint" $HiveFile
Write-Host "Hive loaded at HKLM:\$MountPoint"
---------------
A **Project Closure Deck** (or ‚ÄúProject Closure Presentation‚Äù) is typically used by Project Managers to summarize the project‚Äôs lifecycle, outcomes, lessons learned, and transition plans when presenting to the **end client** or **stakeholders**.

Here‚Äôs what it usually includes ‚Äî slide by slide:

---

### üß≠ 1. **Title Slide**

* Project name
* PM name & team
* Client/stakeholder names
* Date of presentation

---

### üóìÔ∏è 2. **Project Overview / Recap**

* Brief description of the project goals & objectives
* Timeline (start date ‚Üí end date)
* High-level scope summary
* Deliverables committed vs delivered

---

### ‚öôÔ∏è 3. **Scope & Deliverables Summary**

* Planned deliverables vs actual delivered
* Out-of-scope items (if any)
* Key milestones achieved
* Any change requests handled during the project

---

### üìä 4. **Project Performance Summary**

* Budget summary (planned vs actual spend)
* Schedule adherence (on-time %, delays explained)
* Quality metrics (defects, incidents, SLAs met)
* Client satisfaction / UAT results

---

### üß© 5. **Challenges & Resolutions**

* Key issues encountered during the project
* How they were resolved or mitigated
* Lessons learned from those challenges

---

### üí¨ 6. **Client Feedback & Success Stories**

* Feedback quotes or highlights from end users
* Key successes or measurable benefits (KPIs, adoption rate, etc.)

---

### üîÅ 7. **Transition / Handover**

* Post-project support plan (who to contact)
* Knowledge transfer completion
* Documentation delivered (runbooks, SOPs, etc.)
* Handover ownership (to operations or BAU team)

---

### üß† 8. **Lessons Learned**

* What went well
* What could be improved
* Recommendations for future projects

---

### üßæ 9. **Closure Confirmation**

* Client sign-off status
* Outstanding items (if any)
* Next steps (support phase, new initiative, etc.)

---

### üôè 10. **Acknowledgements / Thank You**

* Thank the client & team members
* Optional: project photos, team highlights, milestones celebrated

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------



## üß† **Lessons Learned**

### ‚úÖ *What Went Well*

* **Structured rollout planning:** The Visual Rollout Matrix enabled clear segmentation across BUs and departments, allowing phased throttling of deployments and predictable progress tracking.
* **Cross-team collaboration:** Seamless coordination between PMO, engineering, imaging, communications, and support functions ensured smooth execution and rapid mitigation of issues.
* **Automation & optimization:** Custom PowerShell scripts for user-profile cleanup and disk cleanup significantly reduced manual overhead, improved device readiness, and optimized storage utilization.
* **Software packaging excellence:** Purpose-built software packages (e.g., *VPN Client Update Utility*, *Modern Printer Installer*, *Office 365 Consolidation Pack*) developed by team members streamlined post-upgrade deployments and improved application stability on Windows 11.
* **Proactive communications:** Pre-deployment communications coordinated with the Comms team ensured end users were well informed, resulting in minimal disruption and reduced helpdesk tickets.
* **Real-time insights:** On-the-fly SQL queries and data analysis provided instant visibility into deployment health, compliance, and error trends, enabling proactive corrective actions.

### ‚öôÔ∏è *What Could Be Improved / Issues Observed*

* **Defender and Zscaler interaction:** Defender‚Äôs enhanced security modules caused intermittent Firewall/AV conflict alerts within Zscaler, requiring coordinated policy adjustments.
* **Driver dependencies:** A subset of devices post-upgrade required additional display and audio driver installations, which were addressed through imaging and OEM updates.
* **Legacy device handling:** Early identification of non-compatible hardware would have reduced reliance on ESU (Extended Security Updates) for Windows 10 retention devices.
* **Application readiness validation:** Certain legacy business applications required post-deployment fine-tuning; broader pre-UAT coverage could help preempt these in future rollouts.
* **Driver management process:** While the imaging engineer‚Äôs optimizations worked well, formalizing a version-controlled driver repository will streamline ongoing maintenance.
* **Reporting automation:** Integrating Power BI dashboards earlier would have reduced manual compilation of weekly reporting data.
* **Incident management:** Some minor issues‚Äîdocumented in weekly review slides‚Äîrequired extended follow-up, but were resolved efficiently through close collaboration with operations.

> **Appreciation:**
> Special recognition to our **L1 and L2 support teams** for acting as the first line of response‚Äîabsorbing user escalations, troubleshooting effectively, and ensuring incidents were swiftly brought to closure. Their dedication was instrumental in sustaining deployment momentum and user satisfaction.

---

## üåü **Success Stories / Highlights**

* **Enterprise-wide Windows 11 deployment completed successfully**‚Äîon time, on budget, and aligned with compliance and security mandates.
* **High adoption and stability:** Post-rollout telemetry and feedback show strong system stability and improved user experience.
* **Reusable rollout framework:** The Visual Rollout Matrix model has been formally adopted for future modernization initiatives due to its clarity, scalability, and success rate.
* **Operational efficiency through automation:** The User Profile and Disk Cleanup scripts reduced prep time per device by over 60%, improving deployment throughput across waves.
* **Software packaging innovation:** In-house application packaging (e.g., *SecurePrint Module*, *Collaboration Suite Optimizer*, *VPN Client Utility*) enhanced deployment agility and reduced dependency on third-party packaging timelines.
* **Collaborative excellence:** Strong alignment between engineering, PMO, imaging, and communications teams minimized downtime and ensured readiness at each deployment milestone.
* **Recognition & leadership growth:** The project‚Äôs successful execution led to internal recognition for several contributors, including the promotion of the Tower Lead who co-led and spearheaded technical delivery.
* **Knowledge continuity:** All runbooks, job aids, and communication templates created during the project have been institutionalized for future EUC transformations.
* **End-user satisfaction:** Positive feedback from multiple business units praised the minimal downtime, improved boot times, and the modernized Windows 11 experience.

---
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
Perfect üëç Here‚Äôs how you can structure these into **PowerPoint-ready slides** ‚Äî concise, visually balanced, and phrased for internal leadership presentation.

---

## üéØ **Slide 1 ‚Äì Lessons Learned (What Went Well)**

**Title:** Lessons Learned ‚Äì What Went Well

**Bullets:**

* Visual Rollout Matrix enabled clear BU segmentation and controlled deployment throttling.
* Strong cross-functional coordination ensured smooth milestone delivery.
* Automation (User Profile Cleanup & Disk Cleanup scripts) improved readiness and reduced manual work.
* Custom software packages (VPN Client Utility, SecurePrint Module, Office 365 Consolidation Pack) improved post-upgrade stability and speed of deployment.
* Proactive communications minimized helpdesk volume and boosted end-user readiness.
* Real-time SQL-driven reporting enabled data-backed decision-making during rollouts.

---

## ‚öôÔ∏è **Slide 2 ‚Äì Lessons Learned (Issues & Improvements)**

**Title:** Lessons Learned ‚Äì Issues & Improvement Areas

**Bullets:**

* Defender‚ÄìZscaler conflicts triggered intermittent Firewall/AV alerts; policy tuning required.
* Some post-upgrade devices needed manual display/audio driver updates.
* Late identification of legacy hardware led to selective ESU (Win10) dependency.
* Application readiness gaps caused minor post-migration fine-tuning.
* Need for centralized driver version control to streamline future imaging.
* Manual reporting overhead‚ÄîPower BI integration recommended for next rollout.
* Minor issues documented in weekly reviews; all resolved collaboratively.

> **Note:**
> Props to our **L1 & L2 teams** for being the boots on the ground‚Äîabsorbing escalations, resolving incidents, and ensuring minimal disruption throughout deployment.

---

## üåü **Slide 3 ‚Äì Success Stories / Highlights**

**Title:** Success Stories & Highlights

**Bullets:**

* Enterprise-wide Windows 11 migration **completed successfully**‚Äîon time and within budget.
* **Zero-major-incident deployment**; only isolated ESU cases for non-compliant hardware.
* Visual Rollout Matrix adopted as **standard EUC planning model** for future projects.
* In-house app packaging (**SecurePrint Module, Collaboration Suite Optimizer, VPN Client Utility**) accelerated deployment readiness.
* Automation reduced device prep time by **60%+**, improving throughput and quality.
* Cross-team collaboration recognized; led to **Tower Lead promotion** for technical leadership and project execution excellence.
* Comprehensive job aids, runbooks, and comms templates now standardized for reuse.
* **Positive end-user feedback**‚Äîhigh satisfaction with Windows 11 performance and experience.

---

Would you like me to make this into an actual **.pptx file** (professionally styled, consistent layout, and ready for you to present)? I can generate and share the PowerPoint file for download.






------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------





------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
