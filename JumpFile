https://www.kb.ischool.uw.edu/2022/02/04/set-up-ischool-issued-windows-computer/

https://www.bleepingcomputer.com/news/microsoft/microsoft-fixes-print-to-pdf-feature-broken-by-windows-update/

https://www.catalog.update.microsoft.com/Search.aspx?q=KB5060829

SELECT 
    sys.Name0 AS [ComputerName],
    ui.Title AS [UpdateTitle],
    ui.ArticleID AS [KB],
    ui.Description AS [Description],
    ui.DatePosted AS [ReleaseDate],
    ucs.Status AS [UpdateStatus],
    ucs.LastStatusTime AS [LastReportedTime]
FROM v_UpdateComplianceStatus ucs
INNER JOIN v_UpdateInfo ui
    ON ucs.CI_ID = ui.CI_ID
INNER JOIN v_R_System sys
    ON ucs.ResourceID = sys.ResourceID
WHERE sys.Name0 = 'DeviceName'
  AND ucs.Status = 1 -- 1 = Installed
ORDER BY ui.DatePosted DESC;

-------------

DECLARE @Device NVARCHAR(128) = N'DeviceName';  -- <-- change this

SELECT
    rs.Name0                    AS ComputerName,
    qfe.HotFixID0              AS KB,
    qfe.Caption0               AS Title,
    qfe.Description0           AS Description,
    qfe.InstalledBy0           AS InstalledBy,
    qfe.InstalledOn0           AS InstalledOnRaw,
    TRY_CONVERT(datetime, qfe.InstalledOn0) AS InstalledOn
FROM v_R_System AS rs
JOIN v_GS_QUICK_FIX_ENGINEERING AS qfe
  ON rs.ResourceID = qfe.ResourceID
WHERE rs.Name0 = @Device
ORDER BY TRY_CONVERT(datetime, qfe.InstalledOn0) DESC, qfe.HotFixID0;


-------------
DECLARE @Device NVARCHAR(128) = N'DeviceName';  -- <-- change this

SELECT
    rs.Name0                                   AS ComputerName,
    ui.ArticleID                               AS KB,
    ui.Title                                   AS UpdateTitle,
    ui.DatePosted                              AS ReleaseDate,
    CASE ucs.Status
        WHEN 3 THEN 'Installed'
        WHEN 2 THEN 'Required'
        WHEN 1 THEN 'Not Required'
        WHEN 0 THEN 'Unknown'
        ELSE CONCAT('Status ', ucs.Status)
    END                                         AS UpdateStatus,
    ucs.LastStatusChangeTime                    AS LastStatusChange
FROM v_R_System AS rs
JOIN v_Update_ComplianceStatusAll AS ucs
  ON rs.ResourceID = ucs.ResourceID
JOIN v_UpdateInfo AS ui
  ON ucs.CI_ID = ui.CI_ID
WHERE rs.Name0 = @Device
  AND ucs.Status = 3            -- Installed
ORDER BY ui.DatePosted DESC, ui.ArticleID;

---------------------------------------------------
Start of Script
---------------------------------------
Refer all these Articles for Clean up Hard Drive (C:\): 

https://prosystech.nl/powershell-clean-up-hard-drive-c/
https://level.io/library/script-windows-disk-cleanup
https://roheed.com/free-up-disk-space-using-powershell/
https://darwinsdata.com/how-do-i-run-a-disk-cleanup-in-powershell/
https://www.geeksforgeeks.org/linux-unix/disk-cleanup-using-powershell-scripts/(Less intrusive Way)
---------------------------------------------------


# Variables
$regkeypath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"
$valueName  = "DebugeDdLoopbackApps"
$logFile    = "C:\Temp\RegKey_Update.log"

# Ensure log directory exists
$logDir = Split-Path $logFile
if (!(Test-Path $logDir)) {
    New-Item -Path $logDir -ItemType Directory -Force | Out-Null
}

Function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $logFile -Value "$timestamp : $Message"
}

try {
    Write-Log "Checking if registry value '$valueName' exists at $regkeypath"

    $existingValue = Get-ItemProperty -Path $regkeypath -Name $valueName -ErrorAction SilentlyContinue

    if ($existingValue) {
        Write-Log "Registry value '$valueName' found. Deleting..."
        Remove-ItemProperty -Path $regkeypath -Name $valueName -ErrorAction Stop
        Write-Log "Registry value '$valueName' deleted successfully."
    }
    else {
        Write-Log "Registry value '$valueName' not found. No deletion required."
    }

    # Recreate empty registry value
    Write-Log "Creating empty registry value '$valueName'"
    New-ItemProperty -Path $regkeypath -Name $valueName -PropertyType String -Force | Out-Null
    Write-Log "Registry value '$valueName' created successfully."

    Write-Host "Registry operation completed successfully." -ForegroundColor Green
}
catch {
    Write-Log "ERROR: $($_.Exception.Message)"
    Write-Host "An error occurred: $($_.Exception.Message)" -ForegroundColor Red
}
------------------------------


$regKey = "HKLM\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"
$owner = [System.Security.Principal.NTAccount]"Administrators"

# Take ownership
$acl = Get-Acl -Path "Registry::$regKey"
$acl.SetOwner($owner)
Set-Acl -Path "Registry::$regKey" -AclObject $acl

# Grant Full Control to Administrators
$rule = New-Object System.Security.AccessControl.RegistryAccessRule ("Administrators","FullControl","ContainerInherit,ObjectInherit","None","Allow")
$acl.SetAccessRule($rule)
Set-Acl -Path "Registry::$regKey" -AclObject $acl

Write-Host "Ownership and FullControl granted to Administrators on $regKey"

