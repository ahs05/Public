 https://www.kb.ischool.uw.edu/2022/02/04/set-up-ischool-issued-windows-computer/

https://www.bleepingcomputer.com/news/microsoft/microsoft-fixes-print-to-pdf-feature-broken-by-windows-update/

https://www.catalog.update.microsoft.com/Search.aspx?q=KB5060829

S
---------------------------------------------------
Start of Script
---------------------------------------
Refer all these Articles for Clean up Hard Drive (C:\): 

https://prosystech.nl/powershell-clean-up-hard-drive-c/
https://level.io/library/script-windows-disk-cleanup
https://roheed.com/free-up-disk-space-using-powershell/
https://darwinsdata.com/how-do-i-run-a-disk-cleanup-in-powershell/
https://www.geeksforgeeks.org/linux-unix/disk-cleanup-using-powershell-scripts/(Less intrusive Way)

Defender Error Fix: https://www.windows11forums.com/threads/windows-11-defender-firewall-will-not-load.355/#post-3757
Defender Error Fix: https://techlou.com/fix-unable-to-delete-all-specified-values-error-in-registry-editor/
https://windowsforum.com/threads/win11-upgrade-2025-07-cu-causing-mpssvc-break.375192/
---------------------------------------------------

# Define the registry key path
$RegPath = "HKLM:\SOFTWARE\7-Zip\Hari"

# Get the current ACL of the registry key
$acl = Get-Acl -Path $RegPath

# Create a new access rule
# BUILTIN\Users = all local users
# BUILTIN\Administrators = Local admins group
# NT AUTHORITY\Authenticated Users = All authenticated users (domain or local)
# FullControl = full rights
# ContainerInherit, ObjectInherit = apply to subkeys
# None = no special propagation flags
# Allow = grant permissions
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "BUILTIN\Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)

# Add the rule to the ACL
$acl.SetAccessRule($rule)

# Apply the ACL back to the registry key
Set-Acl -Path $RegPath -AclObject $acl


---------

# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 1: Take ownership
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($owner)
Set-Acl -Path $RegPath -AclObject $acl

# Step 2: Add full control for Authenticated Users
$acl = Get-Acl -Path $RegPath
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    "FullControl",
    "ContainerInherit,ObjectInherit",
    "None",
    "Allow"
)
$acl.SetAccessRule($rule)
Set-Acl -Path $RegPath -AclObject $acl

# Step 3 (Optional): Restore ownership to the service account
# (This keeps Windows happy and avoids service issues)
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl = Get-Acl -Path $RegPath
$acl.SetOwner($svcOwner)
Set-Acl -Path $RegPath -AclObject $acl


---------------------------


# Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# --- Step 0: Force .NET RegistryKey object (sometimes Get-Acl fails directly) ---
$regKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs",
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,
    [System.Security.AccessControl.RegistryRights]::TakeOwnership
)

if (-not $regKey) {
    Write-Error "Failed to open registry key: $RegPath"
    exit
}

# --- Step 1: Take ownership ---
$acl = $regKey.GetAccessControl([System.Security.AccessControl.AccessControlSections]::All)
$owner = [System.Security.Principal.NTAccount]"BUILTIN\Administrators"
$acl.SetOwner($owner)
$regKey.SetAccessControl($acl)

# --- Step 2: Add full control for Authenticated Users ---
$acl = $regKey.GetAccessControl()
$rule = New-Object System.Security.AccessControl.RegistryAccessRule(
    "NT AUTHORITY\Authenticated Users",
    [System.Security.AccessControl.RegistryRights]::FullControl,
    [System.Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [System.Security.AccessControl.InheritanceFlags]::ObjectInherit,
    [System.Security.AccessControl.PropagationFlags]::None,
    [System.Security.AccessControl.AccessControlType]::Allow
)
$acl.SetAccessRule($rule)
$regKey.SetAccessControl($acl)

# --- Step 3 (Optional): Restore ownership back to MpsSvc ---
$acl = $regKey.GetAccessControl()
$svcOwner = New-Object System.Security.Principal.NTAccount("NT SERVICE\MpsSvc")
$acl.SetOwner($svcOwner)
$regKey.SetAccessControl($acl)

$regKey.Close()

----------------------------
#4
$tok = [System.Security.Principal.WindowsIdentity]::GetCurrent().Token
$SE_TAKE_OWNERSHIP = 0x14
$null = [advapi32]::AdjustTokenPrivileges($tok, $false, [PSCustomObject]@{PrivilegeCount=1; Luid=$SE_TAKE_OWNERSHIP; Attributes=2}, 0, [IntPtr]::Zero, [IntPtr]::Zero)
Write-Host "SeTakeOwnershipPrivilege enabled for this session."

------------------------
#5
# Step 1: Define the registry key path
$RegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"

# Step 2: Open the registry key with ReadWrite permissions
$RegKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(
    "SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs", 
    [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree, 
    [System.Security.AccessControl.RegistryRights]::ChangePermissions
)

# Step 3: Get the current ACL
$acl = $RegKey.GetAccessControl()

# Step 4: Set the owner to Administrators (or your current user)
$owner = [System.Security.Principal.NTAccount]"Administrators"
$acl.SetOwner($owner)

# Step 5: Apply the new ACL
$RegKey.SetAccessControl($acl)

# Step 6: Grant FullControl to Administrators
$rule = New-Object System.Security.AccessControl.RegistryAccessRule (
    "Administrators", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow"
)
$acl.AddAccessRule($rule)
$RegKey.SetAccessControl($acl)

$RegKey.Close()

Write-Host "Ownership and full control granted. You can now modify the key."

--------------

#Export 
$HiveRoot = "HKLM\SYSTEM\CurrentControlSet\Services\mpssvc\Parameters\AppCs"
$OutFile = "C:\Temp\Appcs.hiv"
Start-Process -FilePath reg -ArgumentList "save `"$HiveRoot`" `"$OutFile`"" -Wait -NoNewWindow
Write-Host "Saved $HiveRoot to $OutFile"

-----------
#Import

# Path to your hive file
$HiveFile = "C:\Users\hkaka\Downloads\firewall_fix_windows_11\mpssvc.hiv"

# Mount location under HKEY_LOCAL_MACHINE (can also use HKEY_USERS)
$MountPoint = "TempHive"

# Load the hive
reg load "HKLM\$MountPoint" $HiveFile
Write-Host "Hive loaded at HKLM:\$MountPoint"
---------------

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
Perfect — thanks for clarifying.
Here’s a complete and formal **summary draft** tailored for your **MECM/Intune Tower (EDM Team)**, reflecting your real projects (Windows 11 migration, automation, Intune integration, security improvements, etc.) and phrased in a metrics-focused, leadership-report style.

You can copy-paste this directly into your document:

---

### **Highlights from the Past Year (Nov 2024 to Oct 2025)**

#### **Major Accomplishments:**

* Successfully led enterprise-wide **Windows 11 migration initiative**, upgrading over **3,000 endpoints** from Windows 10 to Windows 11 23H2, ensuring full hardware and application compatibility.
* Deployed and managed **modern endpoint provisioning using Windows Autopilot** integrated with **Microsoft Intune**, reducing device setup time by **40%**.
* Enhanced **BitLocker and Defender integration** for improved endpoint security posture, achieving **98% compliance** across managed devices.

#### **Key Metrics (SLA adherence, incident resolution times, customer satisfaction, etc.):**

* Maintained **99.2% SLA adherence** across all MECM/Intune service requests and incidents.
* Reduced **incident resolution time by 25%** through improved monitoring and streamlined escalation workflows.
* Achieved **95% customer satisfaction score** (internal client survey) for service delivery and technical support.

#### **Notable Projects or Initiatives:**

* Introduced **Intune app lifecycle management automation** using PowerShell App Deployment Toolkit (PSADT).
* Implemented **policy-based patch compliance dashboards** via Power BI and MEM reporting.
* Collaborated with Security and Compliance teams to standardize **application allowlisting and deployment rule sets** across regions.

---

### **Operational Performance**

#### **Service Delivery KPIs:**

* 99% successful deployment rate for monthly software updates via MECM.
* 98% compliance rate in Windows quality and feature updates.
* 100% adherence to change management protocols for production deployments.

#### **Volume Trends (Tickets, Requests, Changes):**

* Processed over **7,500 support tickets**, **1,200 change requests**, and **350 automation-driven deployments** through the EDM platform.

#### **Automation and Efficiency Improvements:**

* Automated **driver and BIOS updates** using Dell Command Integration Suite and MECM task sequences.
* Reduced **manual packaging efforts by 30%** with reusable PSADT and IntuneWin frameworks.
* Enhanced **reporting automation** for patch compliance, app deployment, and encryption metrics.

#### **Quality Assurance and Compliance:**

* Conducted quarterly **compliance audits** to maintain endpoint health above **97%** across the enterprise.
* Implemented **compliance baselines** within Intune for Windows Hello for Business and BitLocker policy verification.

---

### **Innovation & Improvements**

#### **Process Enhancements:**

* Optimized MECM collections and maintenance tasks, improving console performance by **20%**.
* Introduced a **centralized logging framework** for PowerShell automation scripts to enhance visibility and troubleshooting.

#### **Tooling Upgrades:**

* Upgraded MECM infrastructure to **2403 build**, enabling improved tenant attach and Intune co-management features.
* Integrated **Intune Endpoint Analytics** for proactive monitoring and endpoint performance optimization.

#### **Automation:**

* Developed automated workflows for:

  * Application packaging and deployment validation.
  * OS provisioning through Autopilot and dynamic group assignment.
  * Patch compliance enforcement and alerting.

---

### **Roadmap for the Next Year (Nov 2025 to Oct 2026)**

#### **Strategic Goals:**

* Drive **complete adoption of cloud-based endpoint management** by transitioning 80% of devices to full Intune management.
* Strengthen **endpoint security posture** through advanced Defender for Endpoint integrations and vulnerability baselines.
* Enhance **operational visibility** via AI-based analytics for device performance, update compliance, and user experience.

#### **Planned Initiatives:**

* Implement **Windows Update for Business (WUfB)** for streamlined patch deployment and compliance tracking.
* Expand **Zero Trust initiatives** by enforcing conditional access and compliance-based device restrictions.
* Continue **automation expansion**, targeting at least **50% reduction in manual packaging and deployments**.
* Pilot **self-service device provisioning portal** using Intune Company Portal for simplified end-user onboarding.
* Collaborate with infrastructure and security teams for **endpoint telemetry centralization** using Azure Log Analytics.

---

Would you like me to make this a **polished Word or PDF document** (formatted with headings, bullet alignment, and sections ready for submission to leadership)?


No one is being singled out — this is just a collective reminder for everyone to **acknowledge and adhere** to this simple discipline.  

Together, these small steps will help us stay sharp, responsive, and synced as a team.

