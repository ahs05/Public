I hope this email finds you well.

We are currently in the process of ensuring that the Java Discovery Tool complies with our internal policies before obtaining TAP approval for use. As part of this process, our procurement team has requested written confirmation from Azul stating that:

The Java Discovery Tool is included in our current Java subscription contract agreement.
Its usage is provided at no additional cost.
Could you please provide us with an updated contract or a formal document explicitly confirming these details? This would help expedite the approval process on our end.

If you need any further information or documentation from our side, please let me know.

Thank you for your assistance, and I look forward to your response.





#Uninstall Java
$uninstallapplist = @(Get-ChildItem HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall | 
    foreach-object {get-itemproperty $_.PSPath} |
    select-object DisplayName,InstallLocation,uninstallstring |
    Where-Object {$_.DisplayName -ne $null -and $_.uninstallstring -ne $null -and $_.InstallLocation -ne $null})

$uninstallapplist += @(Get-ChildItem HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | 
    foreach-object {get-itemproperty $_.PSPath} |
    select-object DisplayName,InstallLocation,uninstallstring |
    Where-Object {$_.DisplayName -ne $null -and $_.uninstallstring -ne $null -and $_.InstallLocation -ne $null})

if (test-path HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall) {
	$uninstallapplist += @(Get-ChildItem HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall | 
	    ForEach-Object {get-itemproperty $_.PSPath} |
	    select-object DisplayName,InstallLocation,uninstallstring |
	    Where-Object {$_.DisplayName -ne $null -and $_.uninstallstring -ne $null -and $_.InstallLocation -ne $null})
}

# You can add additional uninstalls by copying and pasting the {$_.DisplayName -like "*Ask*" -or {$_.DisplayName -like "*Ask*" -or...
$uninstallapplist = $uninstallapplist | Where-Object {$_.InstallLocation -like "*jre*" } |
                                             sort-object DisplayName -Unique


# Now that we have the list - let's go through each one and uninstall it

foreach ($app in $uninstallapplist) {
	write-host "Uninstalling $($app.displayname) ...."
	if ($app.uninstallstring -like "msiexec.exe*") { 
    	$app.uninstallstring = $app.uninstallstring -replace "/I","/X"  
    	$app.uninstallstring = $app.uninstallstring -replace "msiexec.exe ","" 
    	$app.uninstallstring = "$($app.uninstallstring) /qn"
		
		$retcode = (start-process -filepath "msiexec.exe" -ArgumentList "$($app.uninstallstring)" -wait -passthru).exitcode
		
	}
	# If the uninstall command is not an msiexec program then we do things differently - Note: I have included the following code but not tested it yet - It should work :-)
	else {
		# If the uninstall command itself has double quotes around it because it has spaces in the path, then we have to use the "&" prefix
		if ($app.UninstallString[0] -eq '"') {Invoke-Expression "& $('$app.uninstallstring')"}
		# Otherwise we just invoke the uninstall string 
		else {Invoke-Expression "& $('$app.uninstallstring') /S"}
		# and get the exit code
		$retcode = $LASTEXITCODE
	}
	write-host "$($app.displayname) uninstalled - Return code: $retcode"
}
