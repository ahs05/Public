# Load necessary .NET assemblies for WPF
Add-Type -AssemblyName PresentationFramework

# Define the WPF XAML layout
[xml]$xaml = @"
<Window 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Device Collection Management" Height="400" Width="570" ResizeMode="NoResize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Title -->
        <Label Content="Device Collection Management" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="24" Grid.Row="0"/>

        <!-- Main Content -->
        <StackPanel Grid.Row="1" Margin="20">
            
            <!-- First Computer (Old Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Label Content="Old Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer1" Width="200"/>
                <Button x:Name="CheckComputer1Button" Content="Get Collections" Width="100" Margin="10,0,0,0"/>
            </StackPanel>

            <!-- Second Computer (New Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="10,10,0,0">
                <Label Content="New Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer2" Width="200"/>
                <Button x:Name="CheckComputer2Button" Content="Check Device" Width="100" Margin="10,0,0,0" IsEnabled="False"/>
            </StackPanel>

            <!-- Action Button -->
            <Button x:Name="AddToCollectionsButton" Content="Add New Device to Collections" Width="250" HorizontalAlignment="Center" Margin="10,20,0,0"/>

            <!-- Output TextBox -->
            <TextBox x:Name="OutputBox" Height="100" VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" HorizontalAlignment="Stretch" Margin="0,20,0,0" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>
"@

# Parse the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$Window = [Windows.Markup.XamlReader]::Load($reader)

# Get references to the controls
$InputComputer1 = $Window.FindName("InputComputer1")
$InputComputer2 = $Window.FindName("InputComputer2")
$CheckComputer1Button = $Window.FindName("CheckComputer1Button")
$CheckComputer2Button = $Window.FindName("CheckComputer2Button")
$AddToCollectionsButton = $Window.FindName("AddToCollectionsButton")
$OutputBox = $Window.FindName("OutputBox")

# Global variable to store collections for Computer 1
$global:computer1Collections = $null

# Function to update the output box using the Dispatcher to avoid blocking the UI
function Update-OutputBox {
    param (
        [string]$Message
    )

    $OutputBox.Dispatcher.Invoke([action]{
        $OutputBox.AppendText("$Message`r`n")
    })
}

# Function to retrieve SCCM collections with "Discovery" in the name that contain a specified device
function Get-SCCMDiscoveryCollectionsForDevice {
    param (
        [string]$ComputerName,
        [string]$SiteCode,
        [string]$SiteServer
    )

    try {
        # Import the ConfigurationManager module if not already loaded
        if (-not (Get-Module -ListAvailable -Name 'ConfigurationManager')) {
            throw "ConfigurationManager module not found. Ensure it's installed and loaded on this machine."
        }

        # Set the SCCM site context
        Import-Module ConfigurationManager -ErrorAction Stop
        cd "$SiteCode`:"

        # Get the device by name
        $device = Get-CMDevice -Name $ComputerName -ErrorAction Stop
        if (-not $device) {
            throw "Device $ComputerName not found in SCCM."
        }

        # Get all collections containing the device
        $collections = Get-CMDeviceCollection | Where-Object {
            $_.Name -match 'Discovery' -and (Get-CMDeviceCollectionMembership -CollectionId $_.CollectionID | Where-Object { $_.ResourceID -eq $device.ResourceID })
        } | Select-Object -Property Name, CollectionID

        return $collections
    } catch {
        Update-OutputBox "Error retrieving collections for $ComputerName: $_"
        return $null
    }
}

# Event: Check Computer 1 (Old Device) and get dynamic collections
$CheckComputer1Button.Add_Click({
    $computer1 = $InputComputer1.Text
    $OutputBox.Clear()

    if ($computer1) {
        Update-OutputBox "Checking collections for $computer1..."

        # Define SCCM site details (replace with your SCCM details)
        $SiteCode = 'ABC' # Replace with your SCCM site code
        $SiteServer = 'YourSiteServer' # Replace with your SCCM site server hostname

        # Fetch collections in a background job to avoid blocking the UI
        Start-Job -ScriptBlock {
            $collections = Get-SCCMDiscoveryCollectionsForDevice -ComputerName $using:computer1 -SiteCode $using:SiteCode -SiteServer $using:SiteServer

            if ($collections) {
                $global:computer1Collections = $collections
                Update-OutputBox "Collections containing 'Discovery' for $using:computer1:"
                $collections | ForEach-Object {
                    Update-OutputBox " - $($_.Name) (ID: $($_.CollectionID))"
                }
                # Enable the "Check Computer 2" button if collections are found
                $CheckComputer2Button.Dispatcher.Invoke([action]{
                    $CheckComputer2Button.IsEnabled = $true
                })
            } else {
                Update-OutputBox "No collections with 'Discovery' found or failed to retrieve collections."
                $CheckComputer2Button.Dispatcher.Invoke([action]{
                    $CheckComputer2Button.IsEnabled = $false
                })
            }
        } | Out-Null
    } else {
        Update-OutputBox "Please enter a valid computer name for the old device."
    }
})

# Event: Check if Computer 2 (New Device) exists
$CheckComputer2Button.Add_Click({
    $computer2 = $InputComputer2.Text
    $OutputBox.Clear()

    if ($computer2) {
        Update-OutputBox "Checking if $computer2 exists..."

        Start-Job -ScriptBlock {
            $exists = Check-ComputerExists -ComputerName $using:computer2
            if ($exists) {
                Update-OutputBox "$using:computer2 exists."
            } else {
                Update-OutputBox "$using:computer2 does not exist."
            }
        } | Out-Null
    } else {
        Update-OutputBox "Please enter a valid computer name for the new device."
    }
})

# Show the window
$Window.ShowDialog()


##############FINAL#########################
# Load necessary .NET assemblies for WPF
Add-Type -AssemblyName PresentationFramework

# Define the WPF XAML layout
[xml]$xaml = @"
<Window 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Device Collection Management" Height="400" Width="570" ResizeMode="NoResize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Title -->
        <Label Content="Device Collection Management" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="24" Grid.Row="0"/>

        <!-- Main Content -->
        <StackPanel Grid.Row="1" Margin="20">
            
            <!-- First Computer (Old Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Label Content="Old Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer1" Width="200"/>
                <Button x:Name="CheckComputer1Button" Content="Get Collections" Width="100" Margin="10,0,0,0"/>
            </StackPanel>

            <!-- Second Computer (New Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="10,10,0,0">
                <Label Content="New Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer2" Width="200"/>
                <Button x:Name="CheckComputer2Button" Content="Check Device" Width="100" Margin="10,0,0,0" IsEnabled="False"/>
            </StackPanel>

            <!-- Action Button -->
            <Button x:Name="AddToCollectionsButton" Content="Add New Device to Collections" Width="250" HorizontalAlignment="Center" Margin="10,20,0,0" IsEnabled="False"/>

            <!-- Output TextBox -->
            <TextBox x:Name="OutputBox" Height="100" VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" HorizontalAlignment="Stretch" Margin="0,20,0,0" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>
"@

# Parse the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$Window = [Windows.Markup.XamlReader]::Load($reader)

# Get references to the controls
$InputComputer1 = $Window.FindName("InputComputer1")
$InputComputer2 = $Window.FindName("InputComputer2")
$CheckComputer1Button = $Window.FindName("CheckComputer1Button")
$CheckComputer2Button = $Window.FindName("CheckComputer2Button")
$AddToCollectionsButton = $Window.FindName("AddToCollectionsButton")
$OutputBox = $Window.FindName("OutputBox")

# Global variable to store collections for Computer 1
$global:computer1Collections = $null

# Function to update the output box using the Dispatcher to avoid blocking the UI
function Update-OutputBox {
    param (
        [string]$Message
    )

    $OutputBox.Dispatcher.Invoke([action]{
        $OutputBox.AppendText("$Message`r`n")
    })
}

# Optimized Function to retrieve SCCM collections with "Discovery" in the name that contain a specified device
function Get-DiscoveryCollectionsForDevice {
    param (
        [string]$ComputerName,
        [string]$SiteCode,
        [string]$SiteServer
    )

    try {
        # Import the ConfigurationManager module if not already loaded
        if (-not (Get-Module -ListAvailable -Name 'ConfigurationManager')) {
            throw "ConfigurationManager module not found. Ensure it's installed and loaded on this machine."
        }

        # Set the SCCM site context
        Import-Module ConfigurationManager -ErrorAction Stop
        cd "$SiteCode`:"

        # Get the device by name
        $device = Get-CMDevice -Name $ComputerName -ErrorAction Stop
        if (-not $device) {
            throw "Device $ComputerName not found in SCCM."
        }

        # Get all collections that the device is a member of and contain "Discovery" in their names
        $memberCollections = Get-CMDeviceCollectionMembership -ResourceId $device.ResourceID -ErrorAction Stop |
            ForEach-Object { Get-CMDeviceCollection -Id $_.CollectionID } |
            Where-Object { $_.Name -match 'Discovery' } |
            Select-Object -Property Name, CollectionID

        return $memberCollections
    } catch {
        Update-OutputBox "Error retrieving collections for $ComputerName: $_"
        return $null
    }
}

# Function to add a device to specified collections
function Add-DeviceToCollections {
    param (
        [string]$ComputerName,
        [array]$Collections
    )

    try {
        # Get the device by name
        $device = Get-CMDevice -Name $ComputerName -ErrorAction Stop
        if (-not $device) {
            throw "Device $ComputerName not found in SCCM."
        }

        # Add the device to each collection
        foreach ($collection in $Collections) {
            try {
                Add-CMDeviceCollectionDirectMembershipRule -CollectionId $collection.CollectionID -ResourceId $device.ResourceID -ErrorAction Stop
                Update-OutputBox "Added $ComputerName to collection: $($collection.Name)"
            } catch {
                Update-OutputBox "Failed to add $ComputerName to collection: $($collection.Name) - $_"
            }
        }
    } catch {
        Update-OutputBox "Error adding device to collections: $_"
    }
}

# Event: Check Computer 1 (Old Device) and get dynamic collections
$CheckComputer1Button.Add_Click({
    $computer1 = $InputComputer1.Text
    $OutputBox.Clear()

    if ($computer1) {
        Update-OutputBox "Checking collections for $computer1..."

        # Define SCCM site details (replace with your SCCM details)
        $SiteCode = 'ABC' # Replace with your SCCM site code
        $SiteServer = 'YourSiteServer' # Replace with your SCCM site server hostname

        # Fetch collections in a background job to avoid blocking the UI
        Start-Job -ScriptBlock {
            $collections = Get-DiscoveryCollectionsForDevice -ComputerName $using:computer1 -SiteCode $using:SiteCode -SiteServer $using:SiteServer

            if ($collections) {
                $global:computer1Collections = $collections
                Update-OutputBox "Collections containing 'Discovery' for $using:computer1:"
                $collections | ForEach-Object {
                    Update-OutputBox " - $($_.Name) (ID: $($_.CollectionID))"
                }
                # Enable the "Check Computer 2" and "Add to Collections" buttons if collections are found
                $CheckComputer2Button.Dispatcher.Invoke([action]{
                    $CheckComputer2Button.IsEnabled = $true
                })
                $AddToCollectionsButton.Dispatcher.Invoke([action]{
                    $AddToCollectionsButton.IsEnabled = $true
                })
            } else {
                Update-OutputBox "No collections with 'Discovery' found or failed to retrieve collections."
                $CheckComputer2Button.Dispatcher.Invoke([action]{
                    $CheckComputer2Button.IsEnabled = $false
                })
                $AddToCollectionsButton.Dispatcher.Invoke([action]{
                    $AddToCollectionsButton.IsEnabled = $false
                })
            }
        } | Out-Null
    } else {
        Update-OutputBox "Please enter a valid computer name for the old device."
    }
})

# Event: Add the new device to the fetched collections
$AddToCollectionsButton.Add_Click({
    $computer2 = $InputComputer2.Text
    $OutputBox.Clear()

    if ($computer2 -and $global:computer1Collections) {
        Update-OutputBox "Adding $computer2 to collections retrieved for the old device..."

        Start-Job -ScriptBlock {
            Add-DeviceToCollections -ComputerName $using:computer2 -Collections $using:global:computer1Collections
        } | Out-Null
    } else {
        Update-OutputBox "Please ensure both devices are specified and collections are fetched before adding."
    }
})

# Show the window
$Window.ShowDialog()


11111111111111111111111111111
# Optimized Function to retrieve SCCM collections with "Discovery" in the name that contain a specified device
function Get-DiscoveryCollectionsForDevice {
    param (
        [string]$ComputerName,
        [string]$SiteCode,
        [string]$SiteServer
    )

    try {
        # Import the ConfigurationManager module if not already loaded
        if (-not (Get-Module -ListAvailable -Name 'ConfigurationManager')) {
            throw "ConfigurationManager module not found. Ensure it's installed and loaded on this machine."
        }

        # Set the SCCM site context
        Update-OutputBox "Setting SCCM site context to $SiteCode on $SiteServer..."
        Import-Module ConfigurationManager -ErrorAction Stop
        cd "$SiteCode`:"  # Use a backtick for the colon to avoid parsing errors in PowerShell

        # Get the device by name
        Update-OutputBox "Retrieving device information for $ComputerName..."
        $device = Get-CMDevice -Name $ComputerName -ErrorAction Stop
        if (-not $device) {
            throw "Device $ComputerName not found in SCCM."
        }
        
        Update-OutputBox "Device $ComputerName found with Resource ID: $($device.ResourceID)"

        # Retrieve only collections containing "Discovery" in their names
        Update-OutputBox "Retrieving collections with 'Discovery' in the name..."
        $discoveryCollections = Get-CMDeviceCollection | Where-Object { $_.Name -match 'Discovery' }

        if (-not $discoveryCollections) {
            throw "No collections with 'Discovery' in the name were found."
        }

        # Filter to only those collections where the device is a member
        Update-OutputBox "Filtering collections to those containing device $ComputerName..."
        $memberCollections = @()
        foreach ($collection in $discoveryCollections) {
            $isMember = Get-CMDeviceCollectionMembership -CollectionId $collection.CollectionID | Where-Object { $_.ResourceID -eq $device.ResourceID }
            if ($isMember) {
                $memberCollections += $collection
                Update-OutputBox "Device is a member of collection: $($collection.Name) (ID: $($collection.CollectionID))"
            }
        }

        if ($memberCollections.Count -eq 0) {
            Update-OutputBox "Device $ComputerName is not a member of any 'Discovery' collections."
        }

        return $memberCollections
    } catch {
        Update-OutputBox "Error retrieving collections for $ComputerName: $_"
        return $null
    }
}
