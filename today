Add-Type -AssemblyName PresentationFramework

# Define XAML for WPF Layout
[xml]$xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Device Collection Management" Height="400" Width="600" WindowStartupLocation="CenterScreen">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <TextBlock Grid.Row="0" FontSize="18" FontWeight="Bold" Text="Device Collection Management" HorizontalAlignment="Center" Margin="0,0,0,10"/>
        
        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,5">
            <TextBlock Text="Old Device Name:" VerticalAlignment="Center" Width="120"/>
            <TextBox x:Name="OldDeviceNameTextBox" Width="200" Margin="10,0"/>
            <Button x:Name="GetCollectionsButton" Content="Get Collections" Width="100" Margin="10,0"/>
        </StackPanel>
        
        <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,5">
            <TextBlock Text="New Device Name:" VerticalAlignment="Center" Width="120"/>
            <TextBox x:Name="NewDeviceNameTextBox" Width="200" Margin="10,0"/>
            <Button x:Name="CheckDeviceButton" Content="Check Device" Width="100" Margin="10,0" IsEnabled="False"/>
        </StackPanel>
        
        <Button Grid.Row="3" x:Name="AddNewDeviceButton" Content="Add New Device to Collections" Background="Red" Foreground="White" Width="300" Height="30" HorizontalAlignment="Center" Margin="0,10"/>
        
        <ListBox Grid.Row="4" x:Name="OutputListBox" Margin="0,10,0,0" />
    </Grid>
</Window>
"@

# Load XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [System.Windows.Markup.XamlReader]::Load($reader)

# Define Controls
$oldDeviceNameTextBox = $window.FindName("OldDeviceNameTextBox")
$newDeviceNameTextBox = $window.FindName("NewDeviceNameTextBox")
$getCollectionsButton = $window.FindName("GetCollectionsButton")
$checkDeviceButton = $window.FindName("CheckDeviceButton")
$addNewDeviceButton = $window.FindName("AddNewDeviceButton")
$outputListBox = $window.FindName("OutputListBox")

# Placeholder for collections retrieved
$collectionsList = @()

# Event Handler for Get Collections button
$getCollectionsButton.Add_Click({
    $oldDeviceName = $oldDeviceNameTextBox.Text
    if ([string]::IsNullOrWhiteSpace($oldDeviceName)) {
        [System.Windows.MessageBox]::Show("Please enter the old device name.", "Input Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    # Load ConfigurationManager module and set site code (adjust the path and site code as needed)
    Import-Module 'C:\Program Files (x86)\Microsoft Endpoint Manager\AdminConsole\bin\ConfigurationManager.psd1'
    CD SMS:<YourSiteCode> # e.g., CD SMS:PS1:

    # SCCM check for device existence
    $device = Get-CMDevice -Name $oldDeviceName -ErrorAction SilentlyContinue
    if ($null -ne $device) {
        # Fetch collections containing "Discovery" in their name and including the device
        $collectionsList = Get-CMDeviceCollection | Where-Object {
            $_.Name -match 'Discovery' -and (Get-CMDeviceCollectionDirectMembershipRule -CollectionId $_.CollectionID | Where-Object {$_.ResourceID -eq $device.ResourceID})
        }

        if ($collectionsList.Count -gt 0) {
            # Display collections in the output list box
            $outputListBox.Items.Clear()
            $collectionsList | ForEach-Object { $outputListBox.Items.Add("Found Collection: $($_.Name)") }
            $checkDeviceButton.IsEnabled = $true # Enable "Check Device" button
        } else {
            [System.Windows.MessageBox]::Show("No discovery collections found for the device.", "Info", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
        }
    } else {
        [System.Windows.MessageBox]::Show("Old device not found in SCCM.", "Device Not Found", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
    }
})

# Event Handler for Check Device button
$checkDeviceButton.Add_Click({
    $newDeviceName = $newDeviceNameTextBox.Text
    if ([string]::IsNullOrWhiteSpace($newDeviceName)) {
        [System.Windows.MessageBox]::Show("Please enter the new device name.", "Input Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    # Check if new device exists in SCCM
    $newDevice = Get-CMDevice -Name $newDeviceName -ErrorAction SilentlyContinue
    if ($null -ne $newDevice) {
        $outputListBox.Items.Add("New device '$newDeviceName' found in SCCM.")
    } else {
        $outputListBox.Items.Add("New device '$newDeviceName' NOT found in SCCM.")
    }
})

# Event Handler for Add New Device to Collections button
$addNewDeviceButton.Add_Click({
    if ($collectionsList.Count -eq 0) {
        [System.Windows.MessageBox]::Show("No collections retrieved. Please fetch collections first.", "Action Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    $newDeviceName = $newDeviceNameTextBox.Text
    if ([string]::IsNullOrWhiteSpace($newDeviceName)) {
        [System.Windows.MessageBox]::Show("Please enter the new device name.", "Input Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    # Retrieve the new device object to add to collections
    $newDevice = Get-CMDevice -Name $newDeviceName -ErrorAction SilentlyContinue
    if ($null -eq $newDevice) {
        [System.Windows.MessageBox]::Show("New device not found in SCCM.", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    # Add the new device to each retrieved collection
    $collectionsList | ForEach-Object {
        Add-CMDeviceCollectionDirectMembershipRule -CollectionId $_.CollectionID -ResourceId $newDevice.ResourceID
        $outputListBox.Items.Add("Added '$newDeviceName' to collection '$($_.Name)'")
    }
})

# Show the Window
$window.ShowDialog() | Out-Null
