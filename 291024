function Get-SCCMDiscoveryCollectionsWMI {
    param (
        [string]$SiteServer
    )

    $namespace = "root\sms\site_$SiteCode"
    $query = "SELECT Name, CollectionID FROM SMS_Collection WHERE Name LIKE '%Discovery%'"
    $discoveryCollections = Get-WmiObject -Namespace $namespace -Query $query -ComputerName $SiteServer

    return $discoveryCollections | Select-Object -Property Name, CollectionID
}

# Example usage
$SiteCode = 'ABC' # Replace with your SCCM site code
$SiteServer = 'YourSiteServer' # Replace with your SCCM site server hostname

Get-SCCMDiscoveryCollectionsWMI -SiteServer $SiteServer




111111111111111111111111111111111111111111



function Get-SCCMDiscoveryCollections {
    param (
        [string]$SiteCode,
        [string]$SiteServer
    )

    # Import the ConfigurationManager module if not already loaded
    if (-not (Get-Module -ListAvailable -Name 'ConfigurationManager')) {
        throw "ConfigurationManager module not found. Make sure it's installed and loaded on this machine."
    }

    # Set the SCCM site context
    Import-Module ConfigurationManager
    cd "$SiteCode`:"

    # Use Get-CMDeviceCollection with a property filter to reduce data retrieval
    # Only select the Name and CollectionID properties to reduce data load
    $discoveryCollections = Get-CMDeviceCollection -Fast | Where-Object { $_.Name -match 'Discovery' } | 
                            Select-Object -Property Name, CollectionID

    return $discoveryCollections
}

# Example usage
$SiteCode = 'ABC' # Replace with your SCCM site code
$SiteServer = 'YourSiteServer' # Replace with your SCCM site server hostname

Get-SCCMDiscoveryCollections -SiteCode $SiteCode -SiteServer $SiteServer


###############################################
# Load necessary .NET assemblies for WPF
Add-Type -AssemblyName PresentationFramework

# Define the WPF XAML layout
[xml]$xaml = @"
<Window 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Device Collection Management" Height="400" Width="570" ResizeMode="NoResize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Title -->
        <Label Content="Device Collection Management" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="24" Grid.Row="0"/>

        <!-- Main Content -->
        <StackPanel Grid.Row="1" Margin="20">
            
            <!-- First Computer (Old Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Label Content="Old Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer1" Width="200"/>
                <Button x:Name="CheckComputer1Button" Content="Get Collections" Width="100" Margin="10,0,0,0"/>
            </StackPanel>

            <!-- Second Computer (New Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="10,10,0,0">
                <Label Content="New Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer2" Width="200"/>
                <Button x:Name="CheckComputer2Button" Content="Check Device" Width="100" Margin="10,0,0,0" IsEnabled="False"/>
            </StackPanel>

            <!-- Action Button -->
            <Button x:Name="AddToCollectionsButton" Content="Add New Device to Collections" Width="250" HorizontalAlignment="Center" Margin="10,20,0,0"/>

            <!-- Output TextBox -->
            <TextBox x:Name="OutputBox" Height="100" VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" HorizontalAlignment="Stretch" Margin="0,20,0,0" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>
"@

# Parse the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$Window = [Windows.Markup.XamlReader]::Load($reader)

# Get references to the controls
$InputComputer1 = $Window.FindName("InputComputer1")
$InputComputer2 = $Window.FindName("InputComputer2")
$CheckComputer1Button = $Window.FindName("CheckComputer1Button")
$CheckComputer2Button = $Window.FindName("CheckComputer2Button")
$AddToCollectionsButton = $Window.FindName("AddToCollectionsButton")
$OutputBox = $Window.FindName("OutputBox")

# Global variable to store collections for Computer 1
$global:computer1Collections = $null

# Function to update the output box using the Dispatcher to avoid blocking the UI
function Update-OutputBox {
    param (
        [string]$Message
    )

    $OutputBox.Dispatcher.Invoke([action]{
        $OutputBox.AppendText("$Message`r`n")
    })
}

# Function to retrieve SCCM collections with "Discovery" in the name
function Get-SCCMDiscoveryCollections {
    param (
        [string]$SiteCode,
        [string]$SiteServer
    )

    # Import the ConfigurationManager module if not already loaded
    if (-not (Get-Module -ListAvailable -Name 'ConfigurationManager')) {
        throw "ConfigurationManager module not found. Make sure it's installed and loaded on this machine."
    }

    # Set the SCCM site context
    Import-Module ConfigurationManager
    cd "$SiteCode`:"

    try {
        # Use Get-CMDeviceCollection with a property filter to reduce data retrieval
        # Only select the Name and CollectionID properties to reduce data load
        $discoveryCollections = Get-CMDeviceCollection -Fast | Where-Object { $_.Name -match 'Discovery' } | 
                                Select-Object -Property Name, CollectionID

        return $discoveryCollections
    } catch {
        Write-Warning "Failed to retrieve collections: $_"
        return $null
    }
}

# Event: Check Computer 1 (Old Device) and get dynamic collections
$CheckComputer1Button.Add_Click({
    $computer1 = $InputComputer1.Text
    $OutputBox.Clear()

    if ($computer1) {
        Update-OutputBox "Checking collections for $computer1..."

        # Define SCCM site details (replace with your SCCM details)
        $SiteCode = 'ABC' # Replace with your SCCM site code
        $SiteServer = 'YourSiteServer' # Replace with your SCCM site server hostname

        # Fetch collections in a background job to avoid blocking the UI
        Start-Job -ScriptBlock {
            $collections = Get-SCCMDiscoveryCollections -SiteCode $using:SiteCode -SiteServer $using:SiteServer

            if ($collections) {
                $global:computer1Collections = $collections
                Update-OutputBox "Collections containing 'Discovery' for $using:computer1:"
                $collections | ForEach-Object {
                    Update-OutputBox " - $($_.Name) (ID: $($_.CollectionID))"
                }
                # Enable the "Check Computer 2" button if collections are found
                $CheckComputer2Button.Dispatcher.Invoke([action]{
                    $CheckComputer2Button.IsEnabled = $true
                })
            } else {
                Update-OutputBox "No collections with 'Discovery' found or failed to retrieve collections."
                $CheckComputer2Button.Dispatcher.Invoke([action]{
                    $CheckComputer2Button.IsEnabled = $false
                })
            }
        } | Out-Null
    } else {
        Update-OutputBox "Please enter a valid computer name for the old device."
    }
})

# Event: Check if Computer 2 (New Device) exists
$CheckComputer2Button.Add_Click({
    $computer2 = $InputComputer2.Text
    $OutputBox.Clear()

    if ($computer2) {
        Update-OutputBox "Checking if $computer2 exists..."

        Start-Job -ScriptBlock {
            $exists = Check-ComputerExists -ComputerName $using:computer2
            if ($exists) {
                Update-OutputBox "$using:computer2 exists."
            } else {
                Update-OutputBox "$using:computer2 does not exist."
            }
        } | Out-Null
    } else {
        Update-OutputBox "Please enter a valid computer name for the new device."
    }
})

# Show the window
$Window.ShowDialog()

##########################try Catch#####################
# Load necessary .NET assemblies for WPF
Add-Type -AssemblyName PresentationFramework

# Define the WPF XAML layout
[xml]$xaml = @"
<Window 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Device Collection Management" Height="400" Width="570" ResizeMode="NoResize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Title -->
        <Label Content="Device Collection Management" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="24" Grid.Row="0"/>

        <!-- Main Content -->
        <StackPanel Grid.Row="1" Margin="20">
            
            <!-- First Computer (Old Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Label Content="Old Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer1" Width="200"/>
                <Button x:Name="CheckComputer1Button" Content="Get Collections" Width="100" Margin="10,0,0,0"/>
            </StackPanel>

            <!-- Second Computer (New Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="10,10,0,0">
                <Label Content="New Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer2" Width="200"/>
                <Button x:Name="CheckComputer2Button" Content="Check Device" Width="100" Margin="10,0,0,0" IsEnabled="False"/>
            </StackPanel>

            <!-- Action Button -->
            <Button x:Name="AddToCollectionsButton" Content="Add New Device to Collections" Width="250" HorizontalAlignment="Center" Margin="10,20,0,0"/>

            <!-- Output TextBox -->
            <TextBox x:Name="OutputBox" Height="100" VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" HorizontalAlignment="Stretch" Margin="0,20,0,0" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>
"@

# Parse the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$Window = [Windows.Markup.XamlReader]::Load($reader)

# Get references to the controls
$InputComputer1 = $Window.FindName("InputComputer1")
$InputComputer2 = $Window.FindName("InputComputer2")
$CheckComputer1Button = $Window.FindName("CheckComputer1Button")
$CheckComputer2Button = $Window.FindName("CheckComputer2Button")
$AddToCollectionsButton = $Window.FindName("AddToCollectionsButton")
$OutputBox = $Window.FindName("OutputBox")

# Function to update the output box using the Dispatcher
function Update-OutputBox {
    param (
        [string]$Message
    )

    $OutputBox.Dispatcher.Invoke([action]{
        $OutputBox.AppendText("$Message`r`n")
    })
}

# Simplified Get-SCCMDiscoveryCollections for debugging
function Get-SCCMDiscoveryCollections {
    param (
        [string]$SiteCode,
        [string]$SiteServer
    )

    try {
        Update-OutputBox "Attempting to retrieve collections for site code $SiteCode..."
        
        # Simulate collection retrieval by outputting some dummy collections for testing
        # Replace this with actual Get-CMDeviceCollection when testing in SCCM environment
        $discoveryCollections = @(
            [PSCustomObject]@{ Name = "Discovery Collection 1"; CollectionID = "COL001" },
            [PSCustomObject]@{ Name = "Discovery Collection 2"; CollectionID = "COL002" }
        )

        return $discoveryCollections
    } catch {
        Update-OutputBox "Error retrieving collections: $_"
        return $null
    }
}

# Event: Check Computer 1 (Old Device) and get dynamic collections
$CheckComputer1Button.Add_Click({
    try {
        $computer1 = $InputComputer1.Text
        $OutputBox.Clear()
        Update-OutputBox "Button clicked. Starting collection retrieval..."

        if ($computer1) {
            # Test with hard-coded values to see if it retrieves collections
            $SiteCode = 'ABC'  # Replace with your SCCM site code
            $SiteServer = 'YourSiteServer'  # Replace with your SCCM site server hostname

            $collections = Get-SCCMDiscoveryCollections -SiteCode $SiteCode -SiteServer $SiteServer

            if ($collections) {
                Update-OutputBox "Collections containing 'Discovery' for $computer1:"
                $collections | ForEach-Object {
                    Update-OutputBox " - $($_.Name) (ID: $($_.CollectionID))"
                }
                # Enable the "Check Computer 2" button if collections are found
                $CheckComputer2Button.IsEnabled = $true
            } else {
                Update-OutputBox "No collections with 'Discovery' found or failed to retrieve collections."
                $CheckComputer2Button.IsEnabled = $false
            }
        } else {
            Update-OutputBox "Please enter a valid computer name for the old device."
        }
    } catch {
        Update-OutputBox "Error in button click event: $_"
    }
})

# Show the window
$Window.ShowDialog()
