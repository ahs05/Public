# Load the necessary .NET assembly for Windows Forms
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create the form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Device Collection Management"
$form.Size = New-Object System.Drawing.Size(450, 300)
$form.StartPosition = "CenterScreen"

# Create label and input for the first computer
$label1 = New-Object System.Windows.Forms.Label
$label1.Text = "First Computer Name (source):"
$label1.AutoSize = $true
$label1.Location = New-Object System.Drawing.Point(10, 20)
$form.Controls.Add($label1)

$inputComputer1 = New-Object System.Windows.Forms.TextBox
$inputComputer1.Location = New-Object System.Drawing.Point(200, 20)
$inputComputer1.Size = New-Object System.Drawing.Size(150, 20)
$form.Controls.Add($inputComputer1)

# Button to check if Computer 1 exists and get its static collections
$checkComputer1Button = New-Object System.Windows.Forms.Button
$checkComputer1Button.Text = "Check Collections"
$checkComputer1Button.Location = New-Object System.Drawing.Point(360, 18)
$checkComputer1Button.Size = New-Object System.Drawing.Size(75, 25)
$form.Controls.Add($checkComputer1Button)

# Create label and input for the second computer
$label2 = New-Object System.Windows.Forms.Label
$label2.Text = "Second Computer Name (target):"
$label2.AutoSize = $true
$label2.Location = New-Object System.Drawing.Point(10, 60)
$form.Controls.Add($label2)

$inputComputer2 = New-Object System.Windows.Forms.TextBox
$inputComputer2.Location = New-Object System.Drawing.Point(200, 60)
$inputComputer2.Size = New-Object System.Drawing.Size(150, 20)
$form.Controls.Add($inputComputer2)

# Button to check if Computer 2 exists (disabled initially)
$checkComputer2Button = New-Object System.Windows.Forms.Button
$checkComputer2Button.Text = "Check Existence"
$checkComputer2Button.Location = New-Object System.Drawing.Point(360, 58)
$checkComputer2Button.Size = New-Object System.Drawing.Size(75, 25)
$checkComputer2Button.Enabled = $false
$form.Controls.Add($checkComputer2Button)

# Create a button to trigger the action to get collections and add to collections
$button = New-Object System.Windows.Forms.Button
$button.Text = "Get and Add to Collections"
$button.Location = New-Object System.Drawing.Point(100, 100)
$button.Size = New-Object System.Drawing.Size(200, 30)
$form.Controls.Add($button)

# Create a text box to display the output
$outputBox = New-Object System.Windows.Forms.TextBox
$outputBox.Multiline = $true
$outputBox.ScrollBars = "Vertical"
$outputBox.Location = New-Object System.Drawing.Point(10, 150)
$outputBox.Size = New-Object System.Drawing.Size(420, 100)
$form.Controls.Add($outputBox)

# Global variable to store collections for Computer 1
$global:computer1Collections = $null

# Function to retrieve static device collections of a computer
function Get-StaticCollections {
    param (
        [string]$ComputerName
    )

    try {
        $device = Get-CMDevice -Name $ComputerName
        if ($device) {
            $deviceID = $device.ResourceID
            Write-Host "Device found with ResourceID: $deviceID"  # Debugging output

            # Get all collections and filter by the ones that contain the device (via direct membership)
            $deviceCollections = Get-CMDeviceCollection | ForEach-Object {
                $collection = $_
                $rules = Get-CMDeviceCollectionDirectMembershipRule -CollectionId $collection.CollectionID
                if ($rules.ResourceID -contains $deviceID) {
                    return $collection
                }
            } | Where-Object { $_ -ne $null }

            if ($deviceCollections.Count -gt 0) {
                return $deviceCollections
            } else {
                Write-Host "No collections found for the device."  # Debugging output
                return $null
            }
        } else {
            Write-Host "Device not found."  # Debugging output
            return $null
        }
    } catch {
        Write-Warning "Failed to retrieve collections for $ComputerName: $_"
        return $null
    }
}

# Function to check if a computer exists
function Check-ComputerExists {
    param (
        [string]$ComputerName
    )

    try {
        $device = Get-CMDevice -Name $ComputerName
        return $device -ne $null
    } catch {
        Write-Warning "Error occurred while checking $ComputerName: $_"
        return $false
    }
}

# Function to add a device to a collection
function Add-DeviceToCollections {
    param (
        [string]$TargetComputer,
        [array]$Collections
    )

    try {
        $targetDevice = Get-CMDevice -Name $TargetComputer
        if ($targetDevice) {
            $targetDeviceID = $targetDevice.ResourceID
            foreach ($collection in $Collections) {
                Add-CMDeviceCollectionDirectMembershipRule -CollectionId $collection.CollectionID -ResourceID $targetDeviceID
            }
            return $true
        } else {
            return $false
        }
    } catch {
        Write-Warning "Failed to add $TargetComputer to collections: $_"
        return $false
    }
}

# Action: Check Computer 1 and get collections when the "Check Collections" button is clicked
$checkComputer1Button.Add_Click({
    $computer1 = $inputComputer1.Text
    $outputBox.Clear()

    if ($computer1) {
        $outputBox.AppendText("Checking collections for $computer1...`r`n")
        $global:computer1Collections = Get-StaticCollections -ComputerName $computer1

        if ($global:computer1Collections) {
            $outputBox.AppendText("Collections found for $computer1:`r`n")
            $global:computer1Collections | ForEach-Object {
                $outputBox.AppendText(" - $($_.Name)`r`n")
            }
            # Enable the "Check Computer 2" button now that Computer 1 exists and has collections
            $checkComputer2Button.Enabled = $true
        } else {
            $outputBox.AppendText("No collections found or computer does not exist.`r`n")
            $checkComputer2Button.Enabled = $false
        }
    } else {
        $outputBox.AppendText("Please enter a valid computer name for Computer 1.`r`n")
    }
})

# Action: Check if Computer 2 exists when the "Check Existence" button is clicked
$checkComputer2Button.Add_Click({
    $computer2 = $inputComputer2.Text
    $outputBox.Clear()

    if ($computer2) {
        $exists = Check-ComputerExists -ComputerName $computer2
        if ($exists) {
            $outputBox.AppendText("$computer2 exists.`r`n")
        } else {
            $outputBox.AppendText("$computer2 does not exist.`r`n")
        }
    } else {
        $outputBox.AppendText("Please enter a valid computer name for Computer 2.`r`n")
    }
})

# Action: When the "Get and Add to Collections" button is clicked
$button.Add_Click({
    $computer1 = $inputComputer1.Text
    $computer2 = $inputComputer2.Text
    $outputBox.Clear()
    
    if ($computer1 -and $computer2) {
        if ($global:computer1Collections) {
            $outputBox.AppendText("Using cached collections for $computer1...`r`n")
            $global:computer1Collections | ForEach-Object {
                $outputBox.AppendText(" - $($_.Name)`r`n")
            }

            $outputBox.AppendText("Adding $computer2 to the collections...`r`n")
            $success = Add-DeviceToCollections -TargetComputer $computer2 -Collections $global:computer1Collections

            if ($success) {
                $outputBox.AppendText("Successfully added $computer2 to the same collections.`r`n")
            } else {
                $outputBox.AppendText("Failed to add $computer2 to the collections.`r`n")
            }
        } else {
            $outputBox.AppendText("No collections found for $computer1. Please check collections first.`r`n")
        }
    } else {
        $outputBox.AppendText("Please enter both computer names.`r`n")
    }
})

# Show the form
[void]$form.ShowDialog()
