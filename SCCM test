# Load necessary .NET assemblies for WPF
Add-Type -AssemblyName PresentationFramework

# Define the WPF XAML layout
[xml]$xaml = @"
<Window 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Device Collection Management" Height="400" Width="570" ResizeMode="NoResize">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Title -->
        <Label Content="Device Collection Management" HorizontalAlignment="Center" VerticalAlignment="Top" FontSize="24" Grid.Row="0"/>

        <!-- Main Content -->
        <StackPanel Grid.Row="1" Margin="20">
            
            <!-- First Computer (Old Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Label Content="Old Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer1" Width="200"/>
                <Button x:Name="CheckComputer1Button" Content="Get Collections" Width="100" Margin="10,0,0,0"/>
            </StackPanel>

            <!-- Second Computer (New Device) Input -->
            <StackPanel Orientation="Horizontal" Margin="10,10,0,0">
                <Label Content="New Device Name:" Width="150"/>
                <TextBox x:Name="InputComputer2" Width="200"/>
                <Button x:Name="CheckComputer2Button" Content="Check Device" Width="100" Margin="10,0,0,0" IsEnabled="False"/>
            </StackPanel>

            <!-- Action Button -->
            <Button x:Name="AddToCollectionsButton" Content="Add New Device to Collections" Width="250" HorizontalAlignment="Center" Margin="10,20,0,0"/>

            <!-- Output TextBox -->
            <TextBox x:Name="OutputBox" Height="100" VerticalScrollBarVisibility="Auto" TextWrapping="Wrap" HorizontalAlignment="Stretch" Margin="0,20,0,0" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>
"@

# Parse the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$Window = [Windows.Markup.XamlReader]::Load($reader)

# Get references to the controls
$InputComputer1 = $Window.FindName("InputComputer1")
$InputComputer2 = $Window.FindName("InputComputer2")
$CheckComputer1Button = $Window.FindName("CheckComputer1Button")
$CheckComputer2Button = $Window.FindName("CheckComputer2Button")
$AddToCollectionsButton = $Window.FindName("AddToCollectionsButton")
$OutputBox = $Window.FindName("OutputBox")

# Global variable to store collections for Computer 1
$global:computer1Collections = $null

# Function to retrieve static device collections of a computer
function Get-StaticCollections {
    param (
        [string]$ComputerName
    )

    try {
        $device = Get-CMDevice -Name $ComputerName
        if ($device) {
            $deviceID = $device.ResourceID

            # Get all collections that contain the device (via direct membership)
            $deviceCollections = Get-CMDeviceCollection | ForEach-Object {
                $collection = $_
                $rules = Get-CMDeviceCollectionDirectMembershipRule -CollectionId $collection.CollectionID
                if ($rules.ResourceID -contains $deviceID) {
                    return $collection
                }
            } | Where-Object { $_ -ne $null }

            return $deviceCollections
        } else {
            return $null
        }
    } catch {
        Write-Warning "Failed to retrieve collections for $ComputerName - $_"
        return $null
    }
}

# Function to check if a computer exists
function Check-ComputerExists {
    param (
        [string]$ComputerName
    )

    try {
        $device = Get-CMDevice -Name $ComputerName
        return $device -ne $null
    } catch {
        Write-Warning "Error occurred while checking $ComputerName - $_"
        return $false
    }
}

# Function to add a device to a collection
function Add-DeviceToCollections {
    param (
        [string]$TargetComputer,
        [array]$Collections
    )

    try {
        $targetDevice = Get-CMDevice -Name $TargetComputer
        if ($targetDevice) {
            $targetDeviceID = $targetDevice.ResourceID
            foreach ($collection in $Collections) {
                Add-CMDeviceCollectionDirectMembershipRule -CollectionId $collection.CollectionID -ResourceID $targetDeviceID
            }
            return $true
        } else {
            return $false
        }
    } catch {
        Write-Warning "Failed to add $TargetComputer to collections: $_"
        return $false
    }
}

# Event: Check Computer 1 (Old Device) and get collections
$CheckComputer1Button.Add_Click({
    $computer1 = $InputComputer1.Text
    $OutputBox.Clear()

    if ($computer1) {
        $OutputBox.AppendText("Checking collections for $computer1...`r`n")
        $global:computer1Collections = Get-StaticCollections -ComputerName $computer1

        if ($global:computer1Collections) {
            $OutputBox.AppendText("Collections found for $computer1:`r`n")
            $global:computer1Collections | ForEach-Object {
                $OutputBox.AppendText(" - $($_.Name)`r`n")
            }
            # Enable the "Check Computer 2" button if collections are found
            $CheckComputer2Button.IsEnabled = $true
        } else {
            $OutputBox.AppendText("No collections found or computer does not exist.`r`n")
            $CheckComputer2Button.IsEnabled = $false
        }
    } else {
        $OutputBox.AppendText("Please enter a valid computer name for the old device.`r`n")
    }
})

# Event: Check if Computer 2 (New Device) exists
$CheckComputer2Button.Add_Click({
    $computer2 = $InputComputer2.Text
    $OutputBox.Clear()

    if ($computer2) {
        $exists = Check-ComputerExists -ComputerName $computer2
        if ($exists) {
            $OutputBox.AppendText("$computer2 exists.`r`n")
        } else {
            $OutputBox.AppendText("$computer2 does not exist.`r`n")
        }
    } else {
        $OutputBox.AppendText("Please enter a valid computer name for the new device.`r`n")
    }
})

# Event: Add the new device to the collections from the old device
$AddToCollectionsButton.Add_Click({
    $computer1 = $InputComputer1.Text
    $computer2 = $InputComputer2.Text
    $OutputBox.Clear()
    
    if ($computer1 -and $computer2) {
        if ($global:computer1Collections) {
            $OutputBox.AppendText("Using cached collections for $computer1...`r`n")
            $global:computer1Collections | ForEach-Object {
                $OutputBox.AppendText(" - $($_.Name)`r`n")
            }

            $OutputBox.AppendText("Adding $computer2 to the collections...`r`n")
            $success = Add-DeviceToCollections -TargetComputer $computer2 -Collections $global:computer1Collections

            if ($success) {
                $OutputBox.AppendText("Successfully added $computer2 to the same collections.`r`n")
            } else {
                $OutputBox.AppendText("Failed to add $computer2 to the collections.`r`n")
            }
        } else {
            $OutputBox.AppendText("No collections found for $computer1. Please check collections first.`r`n")
        }
    } else {
        $OutputBox.AppendText("Please enter both computer names.`r`n")
    }
})

# Show the window
$Window.ShowDialog()
